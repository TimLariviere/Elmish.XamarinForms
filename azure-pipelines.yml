# Continuous integration is enabled for master
trigger:
  batch: true
  branches:
    include:
    - master

# Pull Request build is enabled for all except PRs only updating documentation
pr:
  paths:
    exclude:
    - README.md
    - docs/*

jobs:
- job: Windows_fast
  displayName: 'Windows (fast)'
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script: |
      echo Install fake-cli and GTK#
      dotnet tool install --tool-path . fake-cli 
      choco install gtksharp
    displayName: 'Install Fake and GTK#'

  - script: |  
      echo run build script
      mkdir -p build_output
      set PATH=%PATH%;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\
      set DOTNET_FALLBACKFOLDER=C:\Program Files\dotnet\sdk\NuGetFallbackFolder
      ./build.cmd
    displayName: 'Build Fabulous'

  - task: PublishTestResults@1
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: 'build_output\TestResults\*.xml'

  - task: CopyFiles@2
    inputs:
      contents: build_output\*.nupkg
      targetFolder: $(Build.ArtifactStagingDirectory)

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: Windows-FabulousBuildOutputs

- job: Windows
  displayName: Windows
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script: |
      echo Install fake-cli and GTK#
      dotnet tool install --tool-path . fake-cli 
      choco install gtksharp
    displayName: 'Install Fake and GTK#'

  - script: |  
      echo run build script
      mkdir -p build_output
      set PATH=%PATH%;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\
      set DOTNET_FALLBACKFOLDER=C:\Program Files\dotnet\sdk\NuGetFallbackFolder
      ./build.cmd Test
    displayName: 'Build Fabulous'

  - task: PublishTestResults@1
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: 'build_output\TestResults\*.xml'

  - task: CopyFiles@2
    inputs:
      contents: build_output\*.nupkg
      targetFolder: $(Build.ArtifactStagingDirectory)

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: Windows-FabulousBuildOutputs

- job: macOS
  displayName: macOS
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - script: |
        echo install fake
        export DOTNET_ROOT=$HOME/.dotnet/
        dotnet tool install fake-cli -g
    displayName: 'Install Fake'

  - script: |
        echo run build script
        export DOTNET_ROOT=$HOME/.dotnet/
        export PATH=$PATH:$HOME/.dotnet/tools:/Library/Frameworks/Mono.framework/Versions/Current/Commands
        export DOTNET_FALLBACKFOLDER=/Users/vsts/.dotnet/sdk/NuGetFallbackFolder
        mkdir -p build_output
        ./build.sh Test
    displayName: 'Build Fabulous'

  - task: PublishTestResults@1
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: './build_output/TestResults/*.xml'

  - task: CopyFiles@1
    inputs:
      contents: ./build_output/*.nupkg
      targetFolder: $(Build.ArtifactStagingDirectory)

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: macOS-FabulousBuildOutputs

- job: Linux
  displayName: Linux
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - script: |
        echo install fake
        export DOTNET_ROOT=$HOME/.dotnet/
        dotnet tool install fake-cli -g
    displayName: 'Install Fake'

  - script: |
        echo run build script
        export DOTNET_ROOT=$HOME/.dotnet/
        export PATH=$PATH:$HOME/.dotnet/tools:/Library/Frameworks/Mono.framework/Versions/Current/Commands
        export DOTNET_FALLBACKFOLDER=/usr/share/dotnet/sdk/NuGetFallbackFolder
        mkdir -p build_output
        ./build.sh Test
    displayName: 'Build Fabulous'

  - task: PublishTestResults@1
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: './build_output/TestResults/*.xml'

  - task: CopyFiles@1
    inputs:
      contents: ./build_output/*.nupkg
      targetFolder: $(Build.ArtifactStagingDirectory)

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: macOS-FabulousBuildOutputs